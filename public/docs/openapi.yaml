openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
paths:
  '/api/workspaces/{workspace}/tickets/{ticket}/comments':
    get:
      summary: 'Listar comentarios de un ticket.'
      operationId: listarComentariosDeUnTicket
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - Comentarios
    post:
      summary: 'Crear un comentario en un ticket.'
      operationId: crearUnComentarioEnUnTicket
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - Comentarios
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: 'El contenido del comentario.'
                  example: '"Este es un comentario."'
                  nullable: false
                visibility:
                  type: string
                  description: ''
                  example: public
                  nullable: false
                  enum:
                    - public
                    - private
              required:
                - content
                - visibility
    parameters:
      -
        in: path
        name: workspace
        description: 'The workspace.'
        example: unde
        required: true
        schema:
          type: string
      -
        in: path
        name: ticket
        description: 'The ticket.'
        example: autem
        required: true
        schema:
          type: string
      -
        in: path
        name: ticket_id
        description: 'El ID del ticket.'
        example: 1
        required: true
        schema:
          type: integer
  /api/user:
    get:
      summary: ''
      operationId: getApiUser
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
      security: []
  '/api/workspaces/{workspace}/invite':
    post:
      summary: 'Invite a user to a workspace.'
      operationId: inviteAUserToAWorkspace
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Invitaciones del Workspace'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: rschulist@example.org
                  nullable: false
                role:
                  type: string
                  description: ''
                  example: manager
                  nullable: false
                  enum:
                    - guest
                    - member
                    - manager
              required:
                - email
                - role
      security: []
    parameters:
      -
        in: path
        name: workspace
        description: 'The workspace.'
        example: porro
        required: true
        schema:
          type: string
  '/api/workspaces/invitations/{invitation}/accept':
    post:
      summary: 'Accept the specified resource from storage.'
      operationId: acceptTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Invitaciones del Workspace'
      security: []
    parameters:
      -
        in: path
        name: invitation
        description: 'The invitation.'
        example: iste
        required: true
        schema:
          type: string
  '/api/workspaces/invitations/{invitation}/decline':
    post:
      summary: 'Decline the specified resource from storage.'
      operationId: declineTheSpecifiedResourceFromStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Invitaciones del Workspace'
      security: []
    parameters:
      -
        in: path
        name: invitation
        description: 'The invitation.'
        example: id
        required: true
        schema:
          type: string
  /api/notifications:
    get:
      summary: 'Listar notificaciones del usuario.'
      operationId: listarNotificacionesDelUsuario
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - Notificaciones
  '/api/notifications/{id}/read':
    post:
      summary: 'Marcar notificación como leída.'
      operationId: marcarNotificacinComoLeda
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - Notificaciones
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the notification.'
        example: sed
        required: true
        schema:
          type: string
      -
        in: path
        name: notification_id
        description: 'El ID de la notificación.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/notifications/{id}':
    delete:
      summary: 'Eliminar notificación.'
      operationId: eliminarNotificacin
      description: ''
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - Notificaciones
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the notification.'
        example: commodi
        required: true
        schema:
          type: string
      -
        in: path
        name: notification_id
        description: 'El ID de la notificación.'
        example: 1
        required: true
        schema:
          type: integer
  /api/notifications/real-time:
    get:
      summary: 'Get real-time notifications for the current user.'
      operationId: getRealTimeNotificationsForTheCurrentUser
      description: ''
      parameters: []
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Notificaciones
      security: []
  '/api/workspaces/{workspace_id}/tags':
    get:
      summary: 'Listar tags del workspace.'
      operationId: listarTagsDelWorkspace
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - Tags
    post:
      summary: 'Crear un tag.'
      operationId: crearUnTag
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - Tags
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'El nombre del tag.'
                  example: '"Urgente"'
                  nullable: false
                color:
                  type: string
                  description: 'El código de color hexadecimal.'
                  example: '"#FF0000"'
                  nullable: false
              required:
                - name
                - color
    parameters:
      -
        in: path
        name: workspace_id
        description: 'El ID del workspace.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/workspaces/{workspace_id}/tags/{tag_id}':
    put:
      summary: 'Actualizar un tag.'
      operationId: actualizarUnTag
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - Tags
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'El nuevo nombre del tag.'
                  example: '"Muy Urgente"'
                  nullable: false
                color:
                  type: string
                  description: 'El nuevo código de color hexadecimal.'
                  example: '"#FF0000"'
                  nullable: false
              required:
                - name
                - color
    delete:
      summary: 'Eliminar un tag.'
      operationId: eliminarUnTag
      description: ''
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - Tags
    parameters:
      -
        in: path
        name: workspace_id
        description: 'El ID del workspace.'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: tag_id
        description: 'El ID del tag.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/tickets/{ticket}/tags':
    post:
      summary: 'Asignar tags a un ticket.'
      operationId: asignarTagsAUnTicket
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Tags de Tickets'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  type: array
                  description: 'Los IDs de los tags a asignar.'
                  example:
                    - 1
                    - 2
                    - 3
                  items:
                    type: string
              required:
                - tags
    parameters:
      -
        in: path
        name: ticket
        description: 'The ticket.'
        example: asperiores
        required: true
        schema:
          type: string
      -
        in: path
        name: ticket_id
        description: 'El ID del ticket.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/tickets/{ticket}/tags/{tag}':
    delete:
      summary: 'Remover un tag de un ticket.'
      operationId: removerUnTagDeUnTicket
      description: ''
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Tags de Tickets'
    parameters:
      -
        in: path
        name: ticket
        description: 'The ticket.'
        example: nulla
        required: true
        schema:
          type: string
      -
        in: path
        name: tag
        description: 'The tag.'
        example: 8
        required: true
        schema:
          type: integer
      -
        in: path
        name: ticket_id
        description: 'El ID del ticket.'
        example: 1
        required: true
        schema:
          type: integer
      -
        in: path
        name: tag_id
        description: 'El ID del tag a remover.'
        example: 2
        required: true
        schema:
          type: integer
  '/api/workspaces/{workspace}/tickets':
    get:
      summary: 'Listar tickets.'
      operationId: listarTickets
      description: ''
      parameters:
        -
          in: query
          name: page
          description: 'Página de resultados.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Página de resultados.'
            example: 1
            nullable: false
        -
          in: query
          name: per_page
          description: 'Número de resultados por página.'
          example: 10
          required: false
          schema:
            type: integer
            description: 'Número de resultados por página.'
            example: 10
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - Tickets
    post:
      summary: 'Crear ticket.'
      operationId: crearTicket
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - Tickets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'El título del ticket.'
                  example: '"Problema con el servidor"'
                  nullable: false
                description:
                  type: string
                  description: 'La descripción del problema.'
                  example: '"El servidor no responde"'
                  nullable: false
                priority:
                  type: string
                  description: ''
                  example: high
                  nullable: false
                  enum:
                    - low
                    - medium
                    - high
                    - critical
                category:
                  type: string
                  description: ''
                  example: bug
                  nullable: false
                  enum:
                    - bug
                    - feature
                    - support
                    - other
                assignee_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the users table.'
                  example: iure
                  nullable: false
              required:
                - title
                - priority
                - category
                - assignee_id
    parameters:
      -
        in: path
        name: workspace
        description: 'The workspace.'
        example: odit
        required: true
        schema:
          type: string
  '/api/workspaces/{workspace}/tickets/{ticket}':
    get:
      summary: 'Mostrar ticket.'
      operationId: mostrarTicket
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - Tickets
    patch:
      summary: 'Actualizar ticket.'
      operationId: actualizarTicket
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - Tickets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: 'El nuevo título del ticket.'
                  example: '"Problema con el servidor actualizado"'
                  nullable: false
                description:
                  type: string
                  description: ''
                  example: 'Quibusdam aspernatur non ut recusandae aut ut et.'
                  nullable: false
                priority:
                  type: string
                  description: ''
                  example: low
                  nullable: false
                  enum:
                    - low
                    - medium
                    - high
                    - critical
                status:
                  type: string
                  description: 'El nuevo estado del ticket.'
                  example: '"cerrado"'
                  nullable: false
                assignee_id:
                  type: string
                  description: 'The <code>id</code> of an existing record in the users table.'
                  example: null
                  nullable: true
              required:
                - description
                - priority
    delete:
      summary: 'Eliminar ticket.'
      operationId: eliminarTicket
      description: ''
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - Tickets
    parameters:
      -
        in: path
        name: workspace
        description: 'The workspace.'
        example: sed
        required: true
        schema:
          type: string
      -
        in: path
        name: ticket
        description: 'The ticket.'
        example: ea
        required: true
        schema:
          type: string
      -
        in: path
        name: id
        description: 'El ID del ticket.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/workspaces/{workspace}/tickets/{ticket}/assign':
    post:
      summary: 'Assign a ticket to a user.'
      operationId: assignATicketToAUser
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Tickets
      security: []
    parameters:
      -
        in: path
        name: workspace
        description: 'The workspace.'
        example: nesciunt
        required: true
        schema:
          type: string
      -
        in: path
        name: ticket
        description: 'The ticket.'
        example: fugiat
        required: true
        schema:
          type: string
  '/api/workspaces/{workspace}/tickets/{ticket}/status':
    post:
      summary: 'Change the status of a ticket.'
      operationId: changeTheStatusOfATicket
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Tickets
      security: []
    parameters:
      -
        in: path
        name: workspace
        description: 'The workspace.'
        example: iure
        required: true
        schema:
          type: string
      -
        in: path
        name: ticket
        description: 'The ticket.'
        example: aspernatur
        required: true
        schema:
          type: string
  /api/login:
    post:
      summary: 'Iniciar sesión.'
      operationId: iniciarSesin
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - Usuarios
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'El correo electrónico del usuario.'
                  example: john@example.com
                  nullable: false
                password:
                  type: string
                  description: 'La contraseña del usuario.'
                  example: secret
                  nullable: false
              required:
                - email
                - password
      security: []
  /api/users:
    get:
      summary: 'Listar usuarios.'
      operationId: listarUsuarios
      description: ''
      parameters:
        -
          in: query
          name: page
          description: 'Página de resultados.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Página de resultados.'
            example: 1
            nullable: false
        -
          in: query
          name: per_page
          description: 'Número de resultados por página.'
          example: 10
          required: false
          schema:
            type: integer
            description: 'Número de resultados por página.'
            example: 10
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - Usuarios
    post:
      summary: 'Crear usuario.'
      operationId: crearUsuario
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Usuarios
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: ztrfdsticbytnx
                  nullable: false
                last_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: fkdh
                  nullable: false
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: doyle.howell@example.org
                  nullable: false
                password:
                  type: string
                  description: 'Must be at least 8 characters.'
                  example: GG`UAq%WZRkasJ
                  nullable: false
                phone:
                  type: string
                  description: 'Must not be greater than 20 characters.'
                  example: vsqfqibfwqydet
                  nullable: true
                address:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: eatbpqmcmxggfloj
                  nullable: true
                avatar_url:
                  type: string
                  description: 'Must be a valid URL. Must end with one of <code>.jpg</code>, <code>.jpeg</code>, or <code>.png</code>.'
                  example: iits.jpg
                  nullable: true
              required:
                - first_name
                - last_name
                - email
                - password
      security: []
  '/api/users/{id}':
    get:
      summary: 'Mostrar usuario.'
      operationId: mostrarUsuario
      description: ''
      parameters: []
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'No query results for model [App\Models\User] harum'
                properties:
                  message:
                    type: string
                    example: 'No query results for model [App\Models\User] harum'
      tags:
        - Usuarios
    put:
      summary: 'Actualizar usuario.'
      operationId: actualizarUsuario
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Usuarios
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: rljdsozmusz
                  nullable: false
                last_name:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: ynnzjhlbqaiwddgxoe
                  nullable: false
                email:
                  type: string
                  description: 'Must be a valid email address. Must not be greater than 255 characters.'
                  example: maximus.bogisich@example.com
                  nullable: false
                password:
                  type: string
                  description: 'Must be at least 8 characters.'
                  example: 'W''M`P''$ow3T@;%'
                  nullable: true
                phone:
                  type: string
                  description: 'Must not be greater than 20 characters.'
                  example: gs
                  nullable: true
                address:
                  type: string
                  description: 'Must not be greater than 255 characters.'
                  example: izapnmfkrysoulsiei
                  nullable: true
                avatar_url:
                  type: string
                  description: 'Must be a valid URL.'
                  example: 'http://runolfsson.org/nemo-quas-cupiditate-quia-aperiam-deleniti-itaque'
                  nullable: true
              required:
                - first_name
                - last_name
                - email
    delete:
      summary: 'Eliminar usuario.'
      operationId: eliminarUsuario
      description: ''
      parameters: []
      responses: {  }
      tags:
        - Usuarios
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the user.'
        example: harum
        required: true
        schema:
          type: string
  /api/logout:
    post:
      summary: 'Cerrar sesión.'
      operationId: cerrarSesin
      description: ''
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - Usuarios
  '/api/workspaces/{workspace}/users':
    get:
      summary: 'Listar usuarios del workspace.'
      operationId: listarUsuariosDelWorkspace
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Usuarios del Workspace'
    post:
      summary: 'Agregar usuario al workspace.'
      operationId: agregarUsuarioAlWorkspace
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - 'Usuarios del Workspace'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: 'El ID del usuario a agregar.'
                  example: 2
                  nullable: false
                role:
                  type: string
                  description: 'El rol del usuario en el workspace.'
                  example: '"member"'
                  nullable: false
              required:
                - user_id
                - role
    parameters:
      -
        in: path
        name: workspace
        description: 'The workspace.'
        example: non
        required: true
        schema:
          type: string
      -
        in: path
        name: workspace_id
        description: 'El ID del workspace.'
        example: 1
        required: true
        schema:
          type: integer
  '/api/workspaces/{workspace}/users/{user}':
    patch:
      summary: 'Update the specified resource in storage.'
      operationId: updateTheSpecifiedResourceInStorage
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Usuarios del Workspace'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  description: ''
                  example: member
                  nullable: false
                  enum:
                    - guest
                    - member
                    - manager
                    - admin
              required:
                - role
      security: []
    delete:
      summary: 'Eliminar usuario del workspace.'
      operationId: eliminarUsuarioDelWorkspace
      description: ''
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - 'Usuarios del Workspace'
    parameters:
      -
        in: path
        name: workspace
        description: 'The workspace.'
        example: quisquam
        required: true
        schema:
          type: string
      -
        in: path
        name: user
        description: 'The user.'
        example: 11
        required: true
        schema:
          type: integer
  /api/workspaces:
    get:
      summary: 'Listar workspaces.'
      operationId: listarWorkspaces
      description: ''
      parameters:
        -
          in: query
          name: page
          description: 'Página de resultados.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Página de resultados.'
            example: 1
            nullable: false
        -
          in: query
          name: per_page
          description: 'Número de resultados por página.'
          example: 10
          required: false
          schema:
            type: integer
            description: 'Número de resultados por página.'
            example: 10
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - Workspaces
    post:
      summary: 'Crear workspace.'
      operationId: crearWorkspace
      description: ''
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - Workspaces
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'El nombre del workspace.'
                  example: '"Nuevo Workspace"'
                  nullable: false
                description:
                  type: string
                  description: ''
                  example: 'Hic et fugit consequuntur.'
                  nullable: true
                logo_url:
                  type: string
                  description: 'Must be a valid URL.'
                  example: 'http://berge.biz/aut-voluptatum-ad-ipsam-maxime-iure-temporibus'
                  nullable: true
              required:
                - name
  '/api/workspaces/{id}':
    get:
      summary: 'Mostrar workspace.'
      operationId: mostrarWorkspace
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - Workspaces
    put:
      summary: 'Actualizar workspace.'
      operationId: actualizarWorkspace
      description: ''
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example: {  }
                properties: {  }
      tags:
        - Workspaces
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'El nuevo nombre del workspace.'
                  example: '"Workspace Actualizado"'
                  nullable: false
                description:
                  type: string
                  description: ''
                  example: 'Omnis eaque eum et aut libero molestiae.'
                  nullable: true
                logo_url:
                  type: string
                  description: 'Must be a valid URL.'
                  example: 'http://quitzon.com/omnis-in-et-nisi-et-vero-repellendus'
                  nullable: true
              required:
                - name
    delete:
      summary: 'Eliminar workspace.'
      operationId: eliminarWorkspace
      description: ''
      parameters: []
      responses:
        204:
          description: ''
      tags:
        - Workspaces
    parameters:
      -
        in: path
        name: id
        description: 'El ID del workspace.'
        example: 1
        required: true
        schema:
          type: integer
tags:
  -
    name: Comentarios
    description: "\nEndpoints para gestionar comentarios en tickets."
  -
    name: Endpoints
    description: ''
  -
    name: 'Invitaciones del Workspace'
    description: "\nEndpoints para gestionar invitaciones a un workspace."
  -
    name: Notificaciones
    description: "\nEndpoints para gestionar notificaciones de usuarios."
  -
    name: Tags
    description: "\nEndpoints para gestionar tags en workspaces."
  -
    name: 'Tags de Tickets'
    description: "\nEndpoints para gestionar tags en tickets."
  -
    name: Tickets
    description: "\nEndpoints para gestionar tickets."
  -
    name: Usuarios
    description: "\nEndpoints para gestionar usuarios."
  -
    name: 'Usuarios del Workspace'
    description: "\nEndpoints para gestionar usuarios dentro de un workspace."
  -
    name: Workspaces
    description: "\nEndpoints para gestionar workspaces."
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'You can retrieve your token by visiting your dashboard and clicking <b>Generate API token</b>.'
security:
  -
    default: []
